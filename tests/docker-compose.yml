services:
  minio:
    image: minio/minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
      - "8001:8001"
    command: redis-server --save "" --appendonly no --stop-writes-on-bgsave-error no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis_test_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=test_db
    volumes:
      - mongodb_test_data:/data/db

  pypylon-runtime:
    build:
      context: ..
      dockerfile: tests/docker/pypylon-runtime.Dockerfile
    ports:
      - "8765:8765"  # Expose pypylon service port
    volumes:
      - ..:/workspace:ro  # Read-only workspace mount
    environment:
      - PYTHONPATH=/workspace
      - PYPYLON_SERVICE_MODE=true
      - PYPYLON_AVAILABLE=true
    command: python3 -m tests.utils.pypylon.service
    healthcheck:
      test: ["CMD", "python3", "-c", "from pypylon import pylon, genicam; factory = pylon.TlFactory.GetInstance(); print('Pylon SDK OK')"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

volumes:
  minio_data:
  mongodb_test_data:
  redis_test_data: 
