# Dockerfile for Mindtrace Camera Service
# This Dockerfile builds a containerized camera management service with support for:
# - Daheng industrial cameras (with Galaxy SDK)
# - Basler industrial cameras (with pypylon - self-contained)
# - OpenCV USB/webcam support
# - Mock cameras for testing
FROM python:3.12-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    MINDTRACE_HW_CAMERA_OPENCV_ENABLED=true \
    MINDTRACE_HW_CAMERA_MOCK_ENABLED=true \
    MINDTRACE_HW_CAMERA_DAHENG_ENABLED=true \
    MINDTRACE_HW_CAMERA_BASLER_ENABLED=true \
    MINDTRACE_HW_CAMERA_MAX_CONCURRENT_CAPTURES=4 \
    PORT=8000

# Install system dependencies with retry and fix-missing for Windows compatibility
RUN apt-get update && \
    # First attempt with basic packages
    apt-get install -y --no-install-recommends --fix-missing \
        # Basic system tools
        curl \
        wget \
        unzip \
        git \
        build-essential \
        pkg-config \
        sudo \
        # Camera and video dependencies
        libopencv-dev \
        python3-opencv \
        v4l-utils \
        # USB device access
        udev \
        # Network tools for camera discovery
        net-tools \
        iputils-ping \
        nmap \
    || \
    # Retry with updated package list if first attempt fails
    (apt-get update && apt-get install -y --no-install-recommends --fix-missing \
        curl wget unzip git build-essential pkg-config sudo \
        libopencv-dev python3-opencv v4l-utils udev \
        net-tools iputils-ping nmap) && \
    # Install additional packages in separate command for better error handling
    apt-get install -y --no-install-recommends --fix-missing \
        # GStreamer for advanced camera support
        gstreamer1.0-tools \
        gstreamer1.0-plugins-base \
        gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-bad \
        gstreamer1.0-plugins-ugly \
        libgstreamer-plugins-base1.0-dev \
        # Graphics libraries (for Basler/Daheng)
        libgl1 \
        libglx-mesa0 \
        libglib2.0-0 \
        libxcb-xinerama0 \
        libxcb-xinput0 \
        libxcb-cursor0 \
        libxext6 \
        libx11-6 \
        # Additional dependencies for industrial cameras
        libusb-1.0-0 \
        libusb-1.0-0-dev \
    || \
    # Final retry with updated package list
    (apt-get update && apt-get install -y --no-install-recommends --fix-missing \
        gstreamer1.0-tools gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly libgstreamer-plugins-base1.0-dev \
        libgl1 libglx-mesa0 libglib2.0-0 libxcb-xinerama0 libxcb-xinput0 libxcb-cursor0 \
        libxext6 libx11-6 libusb-1.0-0 libusb-1.0-0-dev) && \
    # Clean up
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /usr/local/bin/

# Create app user and directories
RUN useradd -m -s /bin/bash mindtrace && \
    usermod -a -G video mindtrace && \
    mkdir -p /app /app/data /app/logs /app/config && \
    chown -R mindtrace:mindtrace /app

# Change to app directory (stay as root for SDK installation)
WORKDIR /app

# Copy the entire workspace context from the repo root
COPY . ./

# Install Python dependencies and configure SDKs as root
ENV UV_HTTP_TIMEOUT=120
RUN cd mindtrace/hardware && \
    # Remove directories that conflict with setuptools package discovery
    rm -rf /app/config /app/data /app/logs && \
    uv sync --extra cameras-all --extra setup-tools && \
    uv pip install -e . && \
    echo "=== Configuring Daheng SDK (Basler pypylon is self-contained) ===" && \
    (uv run mindtrace-setup-daheng --verbose 2>&1 | tee /tmp/daheng_setup.log || (echo "Daheng SDK installation failed:" && cat /tmp/daheng_setup.log && echo "Continuing...")) && \
    # Recreate directories for runtime
    mkdir -p /app/data /app/logs /app/config && \
    chown -R mindtrace:mindtrace /app

# Switch to mindtrace user but with additional permissions
RUN usermod -a -G root,dialout mindtrace
USER mindtrace

# Expose the API port
EXPOSE ${PORT}

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:${PORT}/cameras/discover || exit 1

# Start the camera service using uv run
CMD ["sh", "-c", "cd mindtrace/hardware && uv run uvicorn mindtrace.hardware.api.app:app --host 0.0.0.0 --port ${PORT}"]